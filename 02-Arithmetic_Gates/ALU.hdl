/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Operations for zx, nx, zy, ny
        Not(in=zx, out=NotZX);
        Splitter1to16(in=NotZX, out=ZX16Bit);
        And16(a=x, b=ZX16Bit, out=XfromZX);

        Splitter1to16(in=nx, out=NX16Bit);
        Xor16(a=XfromZX, b=NX16Bit, out=XfromNX);

        Not(in=zy, out=NotZY);
        Splitter1to16(in=NotZY, out=ZY16Bit);
        And16(a=y, b=ZY16Bit, out=YfromZY);

        Splitter1to16(in=ny, out=NY16Bit);
        Xor16(a=YfromZY, b=NY16Bit, out=YfromNY);

        // Operations for f
        And16(a=XfromNX, b=YfromNY, out=AndXY);
        Add16(a=XfromNX, b=YfromNY, out=AddXY);
        Mux16(a=AndXY, b=AddXY, sel=f, out=TempOut);

        // Operations for no
        Splitter1to16(in=no, out=NO16Bit);
        Xor16(a=TempOut, b=NO16Bit, out=out, out[0..7]=Out07, out[8..15]=Out815, out[15]=Out15);

        // Operations for zr
        Or8Way(in=Out07, out=Or07);
        Or8Way(in=Out815, out=Or815);
        Or(a=Or07, b=Or815, out=OrOut);
        Not(in=OrOut, out=zr);

        // Operations for ng
        And(a=Out15, b=true, out=ng);
}