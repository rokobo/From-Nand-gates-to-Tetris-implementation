/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;     
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {return -x;}
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */ 
    function int multiply(int x, int y) {
        var int sum, shiftedX, bit, bits;

        if (x = 0 | y = 0) {return 0;}
        if (x = 1) {return y;}
        if (y = 1) {return x;}

        let sum = 0;
        let shiftedX = x;
        let bit = 0;
        let bits = Math.howManyBits(y);
        while (bit < (bits + 1)) {
            if (Math.isBitOne(y, bit)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let bit = bit + 1;
        }
        return sum;
    }

    // Helper functions for multiply
    function boolean isBitOne(int n, int i) {
        // Determines if i bit of n is set to 1 
        return ~(n & twoToThe[i] = 0);
    }

    function int howManyBits(int y) {
        // Determines the number of bits in y
        var int bitGuess;
        let bitGuess = 15;
        while (bitGuess > 0) {
            if (Math.isBitOne(y, bitGuess)) {return bitGuess;}
            let bitGuess = bitGuess - 1;
        }
        return 0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean negativeResult;
        
        // Check for possible negative division
        if (x < 0) {
            let x = -x;
            if (y < 0) {
                let negativeResult = false;
                let y = -y;
            }
            else {let negativeResult = true;}
        }
        else {
            if (y < 0) {
                let negativeResult = true;
                let y = -y;
            }
            else {let negativeResult = false;}
        }

        if (y > x) {return 0;}
        
        // Compute divison
        if (negativeResult) {return -Math.recursiveDivision(x, y);}
        return Math.recursiveDivision(x, y);
    }

    // Recursive function for division (receives non-negative values)
    function int recursiveDivision(int x, int y) {
        var int quotient;
        if ((y > x) | (y < 0)) {return 0;} // Base case

        let quotient = Math.recursiveDivision(x, y + y);
        if ((x - ((quotient + quotient) * y)) < y) {
            return quotient + quotient;
        }
        else {
            return (quotient + quotient) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int answer;
        var int bitGuess;
        var int answerApproximation, yApproximation;

        let answer = 0;
        let bitGuess = 7;
        while (bitGuess > -1) {
            let answerApproximation = answer + twoToThe[bitGuess];
            let yApproximation = answerApproximation * answerApproximation;
            // Note that ~(x > y) means the same as x <= y
            if ((~(yApproximation > x)) & (yApproximation > 0)) {
                let answer = answerApproximation;
            }
            let bitGuess = bitGuess - 1;
        }
        return answer;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {return a;}
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {return a;}
        return b;
    }
}
